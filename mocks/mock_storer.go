// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Osselnet/gophermart.git/internal/gophermart (interfaces: Storer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gophermart "github.com/Osselnet/gophermart.git/internal/gophermart"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorer) AddOrder(arg0 *gophermart.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorerMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorer)(nil).AddOrder), arg0)
}

// AddSession mocks base method.
func (m *MockStorer) AddSession(arg0 *gophermart.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockStorerMockRecorder) AddSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockStorer)(nil).AddSession), arg0)
}

// AddUser mocks base method.
func (m *MockStorer) AddUser(arg0 *gophermart.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorerMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorer)(nil).AddUser), arg0)
}

// AddWithdraw mocks base method.
func (m *MockStorer) AddWithdraw(arg0 *gophermart.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdraw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdraw indicates an expected call of AddWithdraw.
func (mr *MockStorerMockRecorder) AddWithdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdraw", reflect.TypeOf((*MockStorer)(nil).AddWithdraw), arg0)
}

// DeleteSession mocks base method.
func (m *MockStorer) DeleteSession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStorerMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStorer)(nil).DeleteSession), arg0)
}

// DeleteUser mocks base method.
func (m *MockStorer) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStorerMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStorer)(nil).DeleteUser), arg0)
}

// GetBalance mocks base method.
func (m *MockStorer) GetBalance(arg0 uint64) (gophermart.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(gophermart.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorerMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorer)(nil).GetBalance), arg0)
}

// GetOrder mocks base method.
func (m *MockStorer) GetOrder(arg0 uint64) (*gophermart.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(*gophermart.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorerMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorer)(nil).GetOrder), arg0)
}

// GetOrderWithdrawals mocks base method.
func (m *MockStorer) GetOrderWithdrawals(arg0 uint64) (*gophermart.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithdrawals", arg0)
	ret0, _ := ret[0].(*gophermart.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithdrawals indicates an expected call of GetOrderWithdrawals.
func (mr *MockStorerMockRecorder) GetOrderWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithdrawals", reflect.TypeOf((*MockStorer)(nil).GetOrderWithdrawals), arg0)
}

// GetPullOrders mocks base method.
func (m *MockStorer) GetPullOrders(arg0 uint32) (map[uint64]*gophermart.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullOrders", arg0)
	ret0, _ := ret[0].(map[uint64]*gophermart.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullOrders indicates an expected call of GetPullOrders.
func (mr *MockStorerMockRecorder) GetPullOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullOrders", reflect.TypeOf((*MockStorer)(nil).GetPullOrders), arg0)
}

// GetSession mocks base method.
func (m *MockStorer) GetSession(arg0 string) (*gophermart.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0)
	ret0, _ := ret[0].(*gophermart.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStorerMockRecorder) GetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStorer)(nil).GetSession), arg0)
}

// GetUser mocks base method.
func (m *MockStorer) GetUser(arg0 interface{}) (*gophermart.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*gophermart.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorerMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorer)(nil).GetUser), arg0)
}

// GetUserOrders mocks base method.
func (m *MockStorer) GetUserOrders(arg0 uint64) ([]*gophermart.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0)
	ret0, _ := ret[0].([]*gophermart.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockStorerMockRecorder) GetUserOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockStorer)(nil).GetUserOrders), arg0)
}

// GetUserWithdrawals mocks base method.
func (m *MockStorer) GetUserWithdrawals(arg0 uint64) ([]*gophermart.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0)
	ret0, _ := ret[0].([]*gophermart.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockStorerMockRecorder) GetUserWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockStorer)(nil).GetUserWithdrawals), arg0)
}

// UpdateOrder mocks base method.
func (m *MockStorer) UpdateOrder(arg0 *gophermart.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorerMockRecorder) UpdateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorer)(nil).UpdateOrder), arg0)
}
